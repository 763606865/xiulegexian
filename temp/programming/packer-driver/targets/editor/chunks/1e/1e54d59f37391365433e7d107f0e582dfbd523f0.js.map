{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/%E4%BF%AE%E4%BA%86%E4%B8%AA%E4%BB%99/assets/script/RVO/Simulator.ts"],"names":["Simulator","Agent","KdTree","Obstacle","RVOMath","Vector2","Instance","_instance","constructor","agentNo2indexDict_","index2agentNoDict_","agents_","obstacles_","kdTree_","timeStep_","defaultAgent_","globalTime_","agentMap","init","Map","doStep","updateDeleteAgent","buildAgentTree","i","j","length","agent","computeNeighbors","computeNewVelocity","update","isDelete","needDelete_","splice","onDelAgent","addAgent","position","id_","s_totalID","maxNeighbors_","maxSpeed_","neighborDist_","position_","radius_","timeHorizon_","timeHorizonObst_","velocity_","push","onAddAgent","addObstacle","vertices","obstacleNo","obstacle","point_","previous_","next_","direction_","normalize","subtract","convex_","leftOf","delAgentBySid","sid","clear","agentNo","set","index","getAgentPosition","get","getAgentPrefVelocity","prefVelocity_","setTimeStep","timeStep","setAgentDefaults","neighborDist","maxNeighbors","timeHorizon","timeHorizonObst","radius","maxSpeed","velocity","processObstacles","buildObstacleTree","setAgentPrefVelocity","prefVelocity"],"mappings":"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","sourcesContent":["import Agent from \"./Agent\";\r\nimport KdTree from \"./KdTree\";\r\nimport Obstacle from \"./Obstacle\";\r\nimport RVOMath from \"./RVOMath\";\r\nimport Vector2 from \"./Vector2\";\r\n\r\n\r\nexport default class Simulator {\r\n    private static _instance: Simulator;\r\n    public static get Instance() {\r\n        if (!Simulator._instance) {\r\n            Simulator._instance = new Simulator();\r\n        }\r\n        return Simulator._instance;\r\n    }\r\n\r\n    public static s_totalID = 0;\r\n\r\n    public agentNo2indexDict_: Map<number, number>;\r\n    public index2agentNoDict_: Map<number, number>;\r\n\r\n    public agents_: Array<Agent> = [];\r\n    public obstacles_: Array<Obstacle> = [];\r\n    public kdTree_: KdTree;\r\n    public timeStep_: number;\r\n\r\n    private defaultAgent_: Agent;\r\n    private globalTime_: number;\r\n\r\n    private agentMap = {}\r\n\r\n    constructor() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.agents_ = [];\r\n        this.agentNo2indexDict_ = new Map();\r\n        this.index2agentNoDict_ = new Map();\r\n        this.defaultAgent_ = null;\r\n        this.kdTree_ = new KdTree();\r\n        this.obstacles_ = [];\r\n        this.globalTime_ = 0;\r\n        this.timeStep_ = 0.1;\r\n\r\n    }\r\n\r\n    public doStep() {\r\n        this.updateDeleteAgent();\r\n\r\n        this.kdTree_.buildAgentTree();\r\n\r\n        for (let i = 0, j = this.agents_.length; i < j; i++) {\r\n            let agent = this.agents_[i];\r\n            agent.computeNeighbors();\r\n            agent.computeNewVelocity();\r\n        }\r\n\r\n        for (let i = 0, j = this.agents_.length; i < j; i++) {\r\n            let agent = this.agents_[i];\r\n            agent.update();\r\n        }\r\n\r\n        this.globalTime_ += this.timeStep_;\r\n        return this.globalTime_;\r\n    }\r\n\r\n    private updateDeleteAgent() {\r\n        let isDelete = false;\r\n        for (let i = this.agents_.length - 1; i >= 0; i--) {\r\n            if (this.agents_[i].needDelete_) {\r\n                this.agents_.splice(i, 1);\r\n                isDelete = true;\r\n            }\r\n        }\r\n        if (isDelete)\r\n            this.onDelAgent();\r\n    }\r\n\r\n    public addAgent(position: Vector2) {\r\n        if (this.defaultAgent_ == null) return -1;\r\n        let agent = new Agent();\r\n        agent.id_ = Simulator.s_totalID;\r\n        Simulator.s_totalID++;\r\n        agent.maxNeighbors_ = this.defaultAgent_.maxNeighbors_;\r\n        agent.maxSpeed_ = this.defaultAgent_.maxSpeed_;\r\n        agent.neighborDist_ = this.defaultAgent_.neighborDist_;\r\n        agent.position_ = position;\r\n        agent.radius_ = this.defaultAgent_.radius_;\r\n        agent.timeHorizon_ = this.defaultAgent_.timeHorizon_;\r\n        agent.timeHorizonObst_ = this.defaultAgent_.timeHorizonObst_;\r\n        agent.velocity_ = this.defaultAgent_.velocity_;\r\n        this.agents_.push(agent);\r\n        this.onAddAgent();\r\n        this.agentMap[agent.id_] = agent;\r\n        return agent.id_;\r\n    }\r\n\r\n    public addObstacle(vertices: Array<Vector2>) {\r\n        if (vertices.length < 2) return -1;\r\n\r\n        let obstacleNo = this.obstacles_.length;\r\n        for (let i = 0; i < vertices.length; ++i) {\r\n            let obstacle = new Obstacle();\r\n            obstacle.point_ = vertices[i];\r\n\r\n            if (i != 0) {\r\n                obstacle.previous_ = this.obstacles_[this.obstacles_.length - 1];\r\n                obstacle.previous_.next_ = obstacle;\r\n            }\r\n\r\n            if (i == vertices.length - 1) {\r\n                obstacle.next_ = this.obstacles_[obstacleNo];\r\n                obstacle.next_.previous_ = obstacle;\r\n            }\r\n\r\n            obstacle.direction_ = RVOMath.normalize(Vector2.subtract(vertices[(i == vertices.length - 1 ? 0 : i + 1)], vertices[i]));\r\n\r\n            if (vertices.length == 2) {\r\n                obstacle.convex_ = true;\r\n            } else {\r\n                obstacle.convex_ = (RVOMath.leftOf(vertices[(i == 0 ? vertices.length - 1 : i - 1)], vertices[i], vertices[(i == vertices.length - 1 ? 0 : i + 1)]) >= 0);\r\n            }\r\n\r\n            obstacle.id_ = this.obstacles_.length;\r\n            this.obstacles_.push(obstacle);\r\n        }\r\n\r\n        return obstacleNo;\r\n    }\r\n\r\n    //通过sid  删除代理\r\n    delAgentBySid(sid) {\r\n\r\n        // console.log(\"待删除sid：\" + sid);\r\n        let agent = this.agentMap[sid];\r\n        if (agent) {\r\n            agent.needDelete_ = true;\r\n            // this.agentMap[sid] = null;\r\n            delete this.agentMap[sid];\r\n        }\r\n    }\r\n\r\n    private onDelAgent() {\r\n        this.agentNo2indexDict_.clear();\r\n        this.index2agentNoDict_.clear();\r\n\r\n        for (let i = 0; i < this.agents_.length; i++) {\r\n            let agentNo = this.agents_[i].id_;\r\n            this.agentNo2indexDict_.set(agentNo, i);\r\n            this.index2agentNoDict_.set(i, agentNo);\r\n        }\r\n    }\r\n\r\n    private onAddAgent() {\r\n        if (this.agents_.length == 0)\r\n            return;\r\n\r\n        let index = this.agents_.length - 1;\r\n        let agentNo = this.agents_[index].id_;\r\n        this.agentNo2indexDict_.set(agentNo, index);\r\n        this.index2agentNoDict_.set(index, agentNo);\r\n    }\r\n\r\n    public getAgentPosition(agentNo: number) {\r\n        let agent = this.agents_[this.agentNo2indexDict_.get(agentNo)];\r\n        if (agent) {\r\n            return agent.position_;\r\n        } else {\r\n            return new Vector2(0, 0);\r\n        }\r\n    }\r\n\r\n    public getAgentPrefVelocity(agentNo: number) {\r\n        return this.agents_[this.agentNo2indexDict_.get(agentNo)].prefVelocity_;\r\n    }\r\n\r\n    public setTimeStep(timeStep: number) {\r\n        this.timeStep_ = timeStep;\r\n    }\r\n\r\n    public setAgentDefaults(neighborDist: number, maxNeighbors: number, timeHorizon: number, timeHorizonObst: number, radius: number, maxSpeed: number, velocity: Vector2) {\r\n        if (this.defaultAgent_ == null) {\r\n            this.defaultAgent_ = new Agent();\r\n        }\r\n\r\n        this.defaultAgent_.maxNeighbors_ = maxNeighbors;\r\n        this.defaultAgent_.maxSpeed_ = maxSpeed;\r\n        this.defaultAgent_.neighborDist_ = neighborDist;\r\n        this.defaultAgent_.radius_ = radius;\r\n        this.defaultAgent_.timeHorizon_ = timeHorizon;\r\n        this.defaultAgent_.timeHorizonObst_ = timeHorizonObst;\r\n        this.defaultAgent_.velocity_ = velocity;\r\n    }\r\n\r\n    public processObstacles() {\r\n        this.kdTree_.buildObstacleTree();\r\n    }\r\n\r\n    public setAgentPrefVelocity(agentNo: number, prefVelocity: Vector2) {\r\n        let agent = this.agents_[this.agentNo2indexDict_.get(agentNo)];\r\n        if (agent) agent.prefVelocity_ = prefVelocity;\r\n        // this.agents_[this.agentNo2indexDict_.get(agentNo)].prefVelocity_ = prefVelocity;\r\n    }\r\n    // public setAgentPrefVelocity(agentNo: number, prefVelocity: Vector2) {\r\n    //     this.agents_[this.agentNo2indexDict_.get(agentNo)].prefVelocity_ = prefVelocity;\r\n    // }\r\n}"]}