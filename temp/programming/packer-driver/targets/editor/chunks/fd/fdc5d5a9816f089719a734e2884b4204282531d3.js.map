{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/Cocos/ZA/%E4%BF%AE%E4%BA%86%E4%B8%AA%E4%BB%99/assets/script/RVO/Agent.ts"],"names":["Agent","KeyValuePair","ObserverObj","Line","RVOMath","Simulator","Vector2","agentNeighbors_","obstacleNeighbors_","orcaLines_","position_","prefVelocity_","velocity_","id_","maxNeighbors_","maxSpeed_","neighborDist_","radius_","timeHorizon_","timeHorizonObst_","needDelete_","newVelocity_","update","v2","addition","multiply2","Instance","timeStep_","insertObstacleNeighbor","obstacle","rangeSq","nextObstacle","next_","distSq","distSqPointLineSegment","point_","push","i","length","Key","insertAgentNeighbor","agent","absSq","subtract","value","computeNeighbors","sqr","kdTree_","computeObstacleNeighbors","obserObj","computeAgentNeighbors","computeNewVelocity","invTimeHorizonObst","obstacle1","Value","obstacle2","relativePosition1","relativePosition2","alreadyCovered","j","det","point","direction","RVO_EPSILON","distSq1","distSq2","radiusSq","obstacleVector","s","multiply","distSqLine","line","convex_","normalize","y","x","direction_","leftLegDirection","rightLegDirection","leg1","sqrt","division","leg2","leftNeighbor","previous_","isLeftLegForeign","isRightLegForeign","leftCutOff","rightCutOff","cutOffVector","t","tLeft","tRight","unitW","distSqCutoff","RVO_POSITIVEINFINITY","distSqLeft","distSqRight","numObstLines","invTimeHorizon","other","relativePosition","relativeVelocity","combinedRadius","combinedRadiusSq","u","w","wLengthSq","dotProduct1","wLength","leg","dotProduct2","invTimeStep","abs","tempVelocity_","lineFail","linearProgram2","linearProgram3","linearProgram1","lines","lineNo","radius","optVelocity","directionOpt","result","dotProduct","discriminant","sqrtDiscriminant","denominator","numerator","fabs","Math","min","max","tempResult","beginLine","distance","projLines","ii","determinant"],"mappings":"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","sourcesContent":["import { KeyValuePair, ObserverObj } from \"./commonDefine\";\r\nimport Line from \"./Line\";\r\nimport Obstacle from \"./Obstacle\";\r\nimport RVOMath from \"./RVOMath\";\r\nimport Simulator from \"./Simulator\";\r\nimport Vector2 from \"./Vector2\";\r\n\r\n\r\nexport default class Agent\r\n{\r\n    public agentNeighbors_: Array<KeyValuePair<number, Agent>> = [];\r\n    public obstacleNeighbors_: Array<KeyValuePair<number, Obstacle>> = [];\r\n    public orcaLines_: Array<Line> = [];\r\n    public position_: Vector2;\r\n    public prefVelocity_: Vector2 = new Vector2(0, 0);\r\n    public velocity_: Vector2;\r\n    public id_: number;\r\n    public maxNeighbors_: number;\r\n    public maxSpeed_: number;\r\n    public neighborDist_: number;\r\n    public radius_: number;\r\n    public timeHorizon_: number;\r\n    public timeHorizonObst_: number;\r\n    public needDelete_: boolean = false;\r\n\r\n    private newVelocity_: Vector2 = new Vector2(0, 0);\r\n\r\n    public update()\r\n    {\r\n        this.velocity_ = this.newVelocity_;\r\n        let v2 = Vector2.addition(this.position_, Vector2.multiply2(Simulator.Instance.timeStep_, this.velocity_));\r\n        this.position_ = v2;\r\n    }\r\n\r\n    public insertObstacleNeighbor(obstacle: Obstacle, rangeSq: number)\r\n    {\r\n        let nextObstacle = obstacle.next_;\r\n        let distSq = RVOMath.distSqPointLineSegment(obstacle.point_, nextObstacle.point_, this.position_);\r\n        if (distSq < rangeSq)\r\n        {\r\n            this.obstacleNeighbors_.push(new KeyValuePair<number, Obstacle>(distSq, obstacle));\r\n            let i = this.obstacleNeighbors_.length - 1;\r\n            while (i != 0 && distSq < this.obstacleNeighbors_[i - 1].Key)\r\n            {\r\n                this.obstacleNeighbors_[i] = this.obstacleNeighbors_[i - 1];\r\n                --i;\r\n            }\r\n            this.obstacleNeighbors_[i] = new KeyValuePair<number, Obstacle>(distSq, obstacle);\r\n        }\r\n    }\r\n\r\n    public insertAgentNeighbor(agent: Agent, rangeSq: ObserverObj<number>)\r\n    {\r\n        if (agent && this != agent)\r\n        {\r\n            let distSq = RVOMath.absSq(Vector2.subtract(this.position_, agent.position_));\r\n            if (distSq < rangeSq.value)\r\n            {\r\n                if (this.agentNeighbors_.length < this.maxNeighbors_)\r\n                {\r\n                    this.agentNeighbors_.push(new KeyValuePair<number, Agent>(distSq, agent));\r\n                }\r\n                let i = this.agentNeighbors_.length - 1;\r\n                while (i != 0 && distSq < this.agentNeighbors_[i - 1].Key)\r\n                {\r\n                    this.agentNeighbors_[i] = this.agentNeighbors_[i - 1];\r\n                    --i;\r\n                }\r\n                this.agentNeighbors_[i] = new KeyValuePair<number, Agent>(distSq, agent);\r\n\r\n                if (this.agentNeighbors_.length == this.maxNeighbors_)\r\n                {\r\n                    rangeSq.value = this.agentNeighbors_[this.agentNeighbors_.length - 1].Key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public computeNeighbors()\r\n    {\r\n        this.obstacleNeighbors_ = [];\r\n        let rangeSq = RVOMath.sqr(this.timeHorizonObst_ * this.maxSpeed_ + this.radius_);\r\n        Simulator.Instance.kdTree_.computeObstacleNeighbors(this, rangeSq);\r\n\r\n        this.agentNeighbors_ = [];\r\n        if (this.maxNeighbors_ > 0)\r\n        {\r\n            let obserObj: ObserverObj<number> = new ObserverObj();\r\n            obserObj.value = RVOMath.sqr(this.neighborDist_);\r\n            Simulator.Instance.kdTree_.computeAgentNeighbors(this, obserObj);\r\n        }\r\n    }\r\n\r\n    public computeNewVelocity()\r\n    {\r\n        this.orcaLines_ = [];\r\n\r\n        let invTimeHorizonObst = 1 / this.timeHorizonObst_;\r\n\r\n        for (let i = 0; i < this.obstacleNeighbors_.length; ++i)\r\n        {\r\n            let obstacle1 = this.obstacleNeighbors_[i].Value;\r\n            let obstacle2 = obstacle1.next_;\r\n\r\n            let relativePosition1 = Vector2.subtract(obstacle1.point_, this.position_);\r\n            let relativePosition2 = Vector2.subtract(obstacle2.point_, this.position_);\r\n\r\n            let alreadyCovered = false;\r\n            for (let j = 0; j < this.orcaLines_.length; ++j)\r\n            {\r\n                if (RVOMath.det(Vector2.subtract(Vector2.multiply2(invTimeHorizonObst, relativePosition1), this.orcaLines_[j].point), this.orcaLines_[j].direction) - invTimeHorizonObst * this.radius_ >= -RVOMath.RVO_EPSILON && RVOMath.det(Vector2.subtract(Vector2.multiply2(invTimeHorizonObst, relativePosition2), this.orcaLines_[j].point), this.orcaLines_[j].direction) - invTimeHorizonObst * this.radius_ >= -RVOMath.RVO_EPSILON)\r\n                {\r\n                    alreadyCovered = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (alreadyCovered)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            let distSq1 = RVOMath.absSq(relativePosition1);\r\n            let distSq2 = RVOMath.absSq(relativePosition2);\r\n\r\n            let radiusSq = RVOMath.sqr(this.radius_);\r\n            let obstacleVector = Vector2.subtract(obstacle2.point_, obstacle1.point_);\r\n            let s = Vector2.multiply(Vector2.multiply2(-1, relativePosition1), obstacleVector) / RVOMath.absSq(obstacleVector);\r\n            let distSqLine = RVOMath.absSq(Vector2.subtract(Vector2.multiply2(-1, relativePosition1), Vector2.multiply2(s, obstacleVector)));\r\n\r\n            let line = new Line();\r\n            if (s < 0 && distSq1 <= radiusSq)\r\n            {\r\n                if (obstacle1.convex_)\r\n                {\r\n                    line.point = new Vector2(0, 0);\r\n                    line.direction = RVOMath.normalize(new Vector2(-relativePosition1.y, relativePosition1.x));\r\n                    this.orcaLines_.push(line);\r\n                }\r\n                continue;\r\n            } else if (s > 1 && distSq2 <= radiusSq)\r\n            {\r\n                if (obstacle2.convex_ && RVOMath.det(relativePosition2, obstacle2.direction_) >= 0)\r\n                {\r\n                    line.point = new Vector2(0, 0);\r\n                    line.direction = RVOMath.normalize(new Vector2(-relativePosition2.y, relativePosition2.x));\r\n                    this.orcaLines_.push(line);\r\n                }\r\n                continue;\r\n            } else if (s >= 0 && s < 1 && distSqLine <= radiusSq)\r\n            {\r\n                line.point = new Vector2(0, 0);\r\n                line.direction = Vector2.multiply2(-1, obstacle1.direction_);\r\n                this.orcaLines_.push(line);\r\n                continue;\r\n            }\r\n\r\n            let leftLegDirection: Vector2, rightLegDirection: Vector2;\r\n            if (s < 0 && distSqLine <= radiusSq)\r\n            {\r\n                if (!obstacle1.convex_) continue;\r\n                obstacle2 = obstacle1;\r\n                let leg1 = RVOMath.sqrt(distSq1 - radiusSq);\r\n                leftLegDirection = Vector2.division(new Vector2(relativePosition1.x * leg1 - relativePosition1.y * this.radius_, relativePosition1.x * this.radius_ + relativePosition1.y * leg1), distSq1);\r\n                rightLegDirection = Vector2.division(new Vector2(relativePosition1.x * leg1 + relativePosition1.y * this.radius_, -relativePosition1.x * this.radius_ + relativePosition1.y * leg1), distSq1);\r\n            } else if (s > 1 && distSqLine <= radiusSq)\r\n            {\r\n                if (!obstacle2.convex_) continue;\r\n                obstacle1 = obstacle2;\r\n                let leg2 = RVOMath.sqrt(distSq2 - radiusSq);\r\n                leftLegDirection = Vector2.division(new Vector2(relativePosition2.x * leg2 - relativePosition2.y * this.radius_, relativePosition2.x * this.radius_ + relativePosition2.y * leg2), distSq2);\r\n                rightLegDirection = Vector2.division(new Vector2(relativePosition2.x * leg2 + relativePosition2.y * this.radius_, -relativePosition2.x * this.radius_ + relativePosition2.y * leg2), distSq2);\r\n            } else\r\n            {\r\n                if (obstacle1.convex_)\r\n                {\r\n                    let leg1 = RVOMath.sqrt(distSq1 - radiusSq);\r\n                    leftLegDirection = Vector2.division(new Vector2(relativePosition1.x * leg1 - relativePosition1.y * this.radius_, relativePosition1.x * this.radius_ + relativePosition1.y * leg1), distSq1);\r\n                } else\r\n                {\r\n                    leftLegDirection = Vector2.multiply2(-1, obstacle1.direction_);\r\n                }\r\n\r\n                if (obstacle2.convex_)\r\n                {\r\n                    let leg2 = RVOMath.sqrt(distSq2 - radiusSq);\r\n                    rightLegDirection = Vector2.division(new Vector2(relativePosition2.x * leg2 - relativePosition2.y * this.radius_, relativePosition2.x * this.radius_ + relativePosition2.y * leg2), distSq2);\r\n                } else\r\n                {\r\n                    //这个地方我不太确定是不是写错了，原文是用的obstacle1.direction_\r\n                    rightLegDirection = Vector2.multiply2(-1, obstacle1.direction_);\r\n                }\r\n            }\r\n\r\n            let leftNeighbor = obstacle1.previous_;\r\n            let isLeftLegForeign = false;\r\n            let isRightLegForeign = false;\r\n            if (obstacle1.convex_ && RVOMath.det(leftLegDirection, Vector2.multiply2(-1, leftNeighbor.direction_)) >= 0)\r\n            {\r\n                leftLegDirection = Vector2.multiply2(-1, leftNeighbor.direction_);\r\n                isLeftLegForeign = true;\r\n            }\r\n\r\n            if (obstacle2.convex_ && RVOMath.det(rightLegDirection, Vector2.multiply2(-1, obstacle2.direction_)) <= 0)\r\n            {\r\n                rightLegDirection = obstacle2.direction_;\r\n                isRightLegForeign = true;\r\n            }\r\n\r\n            let leftCutOff = Vector2.multiply2(invTimeHorizonObst, Vector2.subtract(obstacle1.point_, this.position_));\r\n            let rightCutOff = Vector2.multiply2(invTimeHorizonObst, Vector2.subtract(obstacle2.point_, this.position_));\r\n            let cutOffVector = Vector2.subtract(rightCutOff, leftCutOff);\r\n\r\n            let t = obstacle1 == obstacle2 ? 0.5 : Vector2.multiply(Vector2.subtract(this.velocity_, leftCutOff), cutOffVector) / RVOMath.absSq(cutOffVector);\r\n            let tLeft = Vector2.multiply(Vector2.subtract(this.velocity_, leftCutOff), leftLegDirection);\r\n            let tRight = Vector2.multiply(Vector2.subtract(this.velocity_, rightCutOff), rightLegDirection);\r\n\r\n            if ((t < 0 && tLeft < 0) || (obstacle1 == obstacle2 && tLeft < 0 && tRight < 0))\r\n            {\r\n                let unitW = RVOMath.normalize(Vector2.subtract(this.velocity_, leftCutOff));\r\n                line.direction = new Vector2(unitW.y, -unitW.x);\r\n                line.point = Vector2.addition(leftCutOff, Vector2.multiply2(this.radius_ * invTimeHorizonObst, unitW));\r\n                this.orcaLines_.push(line);\r\n\r\n                continue;\r\n            } else if (t > 1 && tRight < 0)\r\n            {\r\n                let unitW = RVOMath.normalize(Vector2.subtract(this.velocity_, rightCutOff));\r\n                line.direction = new Vector2(unitW.y, -unitW.x);\r\n                line.point = Vector2.addition(rightCutOff, Vector2.multiply2(this.radius_ * invTimeHorizonObst, unitW));\r\n                this.orcaLines_.push(line);\r\n\r\n                continue;\r\n            }\r\n\r\n            let distSqCutoff = (t < 0 || t > 1 || obstacle1 == obstacle2) ? RVOMath.RVO_POSITIVEINFINITY : RVOMath.absSq(Vector2.subtract(this.velocity_, Vector2.addition(leftCutOff, Vector2.multiply2(t, cutOffVector))));\r\n            let distSqLeft = tLeft < 0 ? RVOMath.RVO_POSITIVEINFINITY : RVOMath.absSq(Vector2.subtract(this.velocity_, Vector2.addition(leftCutOff, Vector2.multiply2(tLeft, leftLegDirection))));\r\n            let distSqRight = tRight < 0 ? RVOMath.RVO_POSITIVEINFINITY : RVOMath.absSq(Vector2.subtract(this.velocity_, Vector2.addition(rightCutOff, Vector2.multiply2(tRight, rightLegDirection))));\r\n\r\n            if (distSqCutoff <= distSqLeft && distSqCutoff <= distSqRight)\r\n            {\r\n                line.direction = Vector2.multiply2(-1, obstacle1.direction_);\r\n                line.point = Vector2.addition(leftCutOff, Vector2.multiply2(this.radius_ * invTimeHorizonObst, new Vector2(-line.direction.y, line.direction.x)));\r\n                this.orcaLines_.push(line);\r\n\r\n                continue;\r\n            }\r\n\r\n            if (distSqLeft <= distSqRight)\r\n            {\r\n                if (isLeftLegForeign) continue;\r\n                line.direction = leftLegDirection;\r\n                line.point = Vector2.addition(leftCutOff, Vector2.multiply2(this.radius_ * invTimeHorizonObst, new Vector2(-line.direction.y, line.direction.x)));\r\n                this.orcaLines_.push(line);\r\n\r\n                continue;\r\n            }\r\n\r\n            if (isRightLegForeign) continue;\r\n            line.direction = Vector2.multiply2(-1, rightLegDirection);\r\n            line.point = Vector2.addition(rightCutOff, Vector2.multiply2(this.radius_ * invTimeHorizonObst, new Vector2(-line.direction.y, line.direction.x)));\r\n            this.orcaLines_.push(line);\r\n        }\r\n\r\n        let numObstLines = this.orcaLines_.length;\r\n        let invTimeHorizon = 1.0 / this.timeHorizon_;\r\n        for (let i = 0; i < this.agentNeighbors_.length; ++i)\r\n        {\r\n            let other = this.agentNeighbors_[i].Value;\r\n            if (!other) continue;\r\n            let relativePosition = Vector2.subtract(other.position_, this.position_);\r\n            let relativeVelocity = Vector2.subtract(this.velocity_, other.velocity_);\r\n            let distSq = RVOMath.absSq(relativePosition);\r\n            let combinedRadius = this.radius_ + other.radius_;\r\n            let combinedRadiusSq = RVOMath.sqr(combinedRadius);\r\n\r\n            let line = new Line();\r\n            let u = new Vector2();\r\n\r\n            if (distSq > combinedRadiusSq)\r\n            {\r\n                let w = Vector2.subtract(relativeVelocity, Vector2.multiply2(invTimeHorizon, relativePosition));\r\n                let wLengthSq = RVOMath.absSq(w);\r\n                let dotProduct1 = Vector2.multiply(w, relativePosition);\r\n\r\n                if (dotProduct1 < 0 && RVOMath.sqr(dotProduct1) > combinedRadiusSq * wLengthSq)\r\n                {\r\n                    let wLength = RVOMath.sqrt(wLengthSq);\r\n                    let unitW = Vector2.division(w, wLength);\r\n                    line.direction = new Vector2(unitW.y, -unitW.x);\r\n                    u = Vector2.multiply2(combinedRadius * invTimeHorizon - wLength, unitW);\r\n                } else\r\n                {\r\n                    let leg = RVOMath.sqrt(distSq - combinedRadiusSq);\r\n                    if (RVOMath.det(relativePosition, w) > 0)\r\n                    {\r\n                        line.direction = Vector2.division(new Vector2(relativePosition.x * leg - relativePosition.y * combinedRadius, relativePosition.x * combinedRadius + relativePosition.y * leg), distSq);\r\n                    } else\r\n                    {\r\n                        line.direction = Vector2.division(new Vector2(relativePosition.x * leg + relativePosition.y * combinedRadius, -relativePosition.x * combinedRadius + relativePosition.y * leg), -distSq);\r\n                    }\r\n\r\n                    let dotProduct2 = Vector2.multiply(relativeVelocity, line.direction);\r\n                    u = Vector2.subtract(Vector2.multiply2(dotProduct2, line.direction), relativeVelocity);\r\n                }\r\n            } else\r\n            {\r\n                let invTimeStep = 1 / Simulator.Instance.timeStep_;\r\n                let w = Vector2.subtract(relativeVelocity, Vector2.multiply2(invTimeStep, relativePosition));\r\n                let wLength = RVOMath.abs(w);\r\n                let unitW = Vector2.division(w, wLength);\r\n\r\n                line.direction = new Vector2(unitW.y, -unitW.x);\r\n                u = Vector2.multiply2(combinedRadius * invTimeStep - wLength, unitW);\r\n            }\r\n            line.point = Vector2.addition(this.velocity_, Vector2.multiply2(0.5, u));\r\n            this.orcaLines_[this.orcaLines_.length] = line;\r\n        }\r\n\r\n        let tempVelocity_ = new ObserverObj<Vector2>(new Vector2(this.newVelocity_.x, this.newVelocity_.y));\r\n        let lineFail = this.linearProgram2(this.orcaLines_, this.maxSpeed_, this.prefVelocity_, false, tempVelocity_);\r\n        if (lineFail < this.orcaLines_.length)\r\n        {\r\n            this.linearProgram3(this.orcaLines_, numObstLines, lineFail, this.maxSpeed_, tempVelocity_);\r\n        }\r\n        this.newVelocity_ = tempVelocity_.value;\r\n    }\r\n\r\n    private linearProgram1(lines: Array<Line>, lineNo: number, radius: number, optVelocity: Vector2, directionOpt: boolean, result: ObserverObj<Vector2>): boolean\r\n    {\r\n        let dotProduct = Vector2.multiply(lines[lineNo].point, lines[lineNo].direction);\r\n        let discriminant = RVOMath.sqr(dotProduct) + RVOMath.sqr(radius) - RVOMath.absSq(lines[lineNo].point);\r\n\r\n        if (discriminant < 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        let sqrtDiscriminant = RVOMath.sqrt(discriminant);\r\n        let tLeft = -dotProduct - sqrtDiscriminant;\r\n        let tRight = -dotProduct + sqrtDiscriminant;\r\n\r\n        for (let i = 0; i < lineNo; ++i)\r\n        {\r\n            let denominator = RVOMath.det(lines[lineNo].direction, lines[i].direction);\r\n            let numerator = RVOMath.det(lines[i].direction, Vector2.subtract(lines[lineNo].point, lines[i].point));\r\n\r\n            if (RVOMath.fabs(denominator) <= RVOMath.RVO_EPSILON)\r\n            {\r\n                if (numerator < 0)\r\n                {\r\n                    return false;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            let t = numerator / denominator;\r\n\r\n            if (denominator > 0)\r\n            {\r\n                tRight = Math.min(tRight, t);\r\n            } else\r\n            {\r\n                tLeft = Math.max(tLeft, t);\r\n            }\r\n\r\n            if (tLeft > tRight)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (directionOpt)\r\n        {\r\n            if (Vector2.multiply(optVelocity, lines[lineNo].direction) > 0)\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tRight, lines[lineNo].direction));\r\n            } else\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tLeft, lines[lineNo].direction));\r\n            }\r\n        } else\r\n        {\r\n            let t = Vector2.multiply(lines[lineNo].direction, Vector2.subtract(optVelocity, lines[lineNo].point));\r\n            if (t < tLeft)\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tLeft, lines[lineNo].direction));\r\n            } else if (t > tRight)\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tRight, lines[lineNo].direction));\r\n            } else\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(t, lines[lineNo].direction));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private linearProgram2(lines: Array<Line>, radius: number, optVelocity: Vector2, directionOpt: boolean, result: ObserverObj<Vector2>): number\r\n    {\r\n        if (directionOpt)\r\n        {\r\n            result.value = Vector2.multiply2(radius, optVelocity);\r\n        } else if (RVOMath.absSq(optVelocity) > RVOMath.sqr(radius))\r\n        {\r\n            result.value = Vector2.multiply2(radius, RVOMath.normalize(optVelocity));\r\n        } else\r\n        {\r\n            result.value = optVelocity;\r\n        }\r\n\r\n        for (let i = 0; i < lines.length; ++i)\r\n        {\r\n            if (RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value)) > 0)\r\n            {\r\n                let tempResult = new Vector2(result.value.x, result.value.y);\r\n                if (!this.linearProgram1(lines, i, radius, optVelocity, directionOpt, result))\r\n                {\r\n                    result.value = tempResult;\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return lines.length;\r\n    }\r\n\r\n    private linearProgram3(lines: Array<Line>, numObstLines: number, beginLine: number, radius: number, result: ObserverObj<Vector2>)\r\n    {\r\n        let distance = 0;\r\n        for (let i = beginLine; i < lines.length; ++i)\r\n        {\r\n            if (RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value)) > distance)\r\n            {\r\n                let projLines: Array<Line> = [];\r\n                for (let ii = 0; ii < numObstLines; ++ii)\r\n                {\r\n                    projLines[projLines.length] = lines[ii];\r\n                }\r\n\r\n                for (let j = numObstLines; j < i; ++j)\r\n                {\r\n                    let line = new Line();\r\n                    let determinant = RVOMath.det(lines[i].direction, lines[j].direction);\r\n                    if (RVOMath.fabs(determinant) <= RVOMath.RVO_EPSILON)\r\n                    {\r\n                        if (Vector2.multiply(lines[i].direction, lines[j].direction) > 0.0)\r\n                        {\r\n                            continue;\r\n                        } else\r\n                        {\r\n                            line.point = Vector2.multiply2(0.5, Vector2.addition(lines[i].point, lines[j].point));\r\n                        }\r\n                    } else\r\n                    {\r\n                        line.point = Vector2.addition(lines[i].point, Vector2.multiply2(RVOMath.det(lines[j].direction, Vector2.subtract(lines[i].point, lines[j].point)) / determinant, lines[i].direction));\r\n                    }\r\n\r\n                    line.direction = RVOMath.normalize(Vector2.subtract(lines[j].direction, lines[i].direction));\r\n                    projLines[projLines.length] = line;\r\n                }\r\n\r\n                let tempResult = new Vector2(result.value.x, result.value.y);\r\n                if (this.linearProgram2(projLines, radius, new Vector2(-lines[i].direction.y, lines[i].direction.x), true, result) < projLines.length)\r\n                {\r\n                    result.value = tempResult;\r\n                }\r\n                distance = RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value));\r\n            }\r\n        }\r\n    }\r\n}"]}