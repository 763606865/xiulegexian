{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/Cocos/ZA/%E4%BF%AE%E4%BA%86%E4%B8%AA%E4%BB%99/assets/script/RVO/KdTree.ts"],"names":["ObstacleTreeNode","AgentTreeNode","FloatPair","KdTree","Obstacle","RVOMath","Simulator","Vector2","obstacle_","left_","right_","begin_","end_","maxX_","maxY_","minX_","minY_","constructor","a","b","a_","b_","Lessthan","pair1","pair2","LessthanOrEqual","Morethan","MorethanOrEqual","agents_","obstacleTree_","agentTree_","MAX_LEAF_SIZE","buildAgentTree","length","Instance","Array","i","len","buildAgentTreeRecursive","begin","end","node","position_","x","y","Math","max","min","isVertical","splitValue","left","right","tempAgent","leftSize","buildObstacleTree","num","obstacles_","obstacles","buildObstacleTreeRecursive","optimalSplit","minLeft","minRight","rightSize","obstacleI1","obstacleI2","next_","j","obstacleJ1","obstacleJ2","j1LeftOfI","leftOf","point_","j2LeftOfI","RVO_EPSILON","leftObstacles","rightObstacles","leftCounter","rightCounter","t","det","subtract","splitPoint","addition","multiply2","newObstacle","previous_","convex_","direction_","id_","push","computeObstacleNeighbors","agent","rangeSq","queryObstacleTreeRecursive","obstacle1","obstacle2","agentLeftOfLine","distSqLine","sqr","absSq","insertObstacleNeighbor","computeAgentNeighbors","obserObj","queryAgentTreeRecursive","agentTree","insertAgentNeighbor","distSqLeft","treeNode","distSqRight_1","distSqRight_2","distSqRight_3","distSqRight_4","distSqRight","value"],"mappings":"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","sourcesContent":["import GameConfig from \"../example/gameConfig\";\r\nimport Agent from \"./Agent\";\r\nimport { ObserverObj } from \"./commonDefine\";\r\nimport Obstacle from \"./Obstacle\";\r\nimport RVOMath from \"./RVOMath\";\r\nimport Simulator from \"./Simulator\";\r\nimport Vector2 from \"./Vector2\";\r\n\r\nclass ObstacleTreeNode\r\n{\r\n    public obstacle_: Obstacle;\r\n    public left_: ObstacleTreeNode;\r\n    public right_: ObstacleTreeNode;\r\n}\r\n\r\nclass AgentTreeNode\r\n{\r\n    begin_: number;\r\n    end_: number;\r\n    left_: number;\r\n    right_: number;\r\n    maxX_: number;\r\n    maxY_: number;\r\n    minX_: number;\r\n    minY_: number;\r\n}\r\n\r\nclass FloatPair\r\n{\r\n    private a_: number;\r\n    private b_: number;\r\n\r\n    constructor(a: number, b: number)\r\n    {\r\n        this.a_ = a;\r\n        this.b_ = b;\r\n    }\r\n\r\n    /**\r\n     * 小于\r\n     * @param pair1 \r\n     * @param pair2 \r\n     * @returns \r\n     */\r\n    public static Lessthan(pair1: FloatPair, pair2: FloatPair)\r\n    {\r\n        return pair1.a_ < pair2.a_ || !(pair2.a_ < pair1.a_) && pair1.b_ < pair2.b_;\r\n    }\r\n\r\n    /**\r\n     * 小于等于\r\n     * @param pair1 \r\n     * @param pair2 \r\n     * @returns \r\n     */\r\n    public static LessthanOrEqual(pair1: FloatPair, pair2: FloatPair)\r\n    {\r\n        return (pair1.a_ == pair2.a_ && pair1.b_ == pair2.b_) || FloatPair.Lessthan(pair1, pair2);\r\n    }\r\n\r\n    /**\r\n     * 大于\r\n     * @param pair1 \r\n     * @param pair2 \r\n     * @returns \r\n     */\r\n    public static Morethan(pair1: FloatPair, pair2: FloatPair)\r\n    {\r\n        return !FloatPair.LessthanOrEqual(pair1, pair2);\r\n    }\r\n\r\n    /**\r\n     * 大于等于\r\n     * @param pair1 \r\n     * @param pair2 \r\n     * @returns \r\n     */\r\n    public static MorethanOrEqual(pair1: FloatPair, pair2: FloatPair)\r\n    {\r\n        return !FloatPair.Lessthan(pair1, pair2);\r\n    }\r\n}\r\n\r\nexport default class KdTree\r\n{\r\n    private agents_: Array<Agent>;\r\n    private obstacleTree_: ObstacleTreeNode;\r\n    private agentTree_: Array<AgentTreeNode>;\r\n    private MAX_LEAF_SIZE = 10;\r\n\r\n    public buildAgentTree()\r\n    {\r\n        if (this.agents_ == null || this.agents_.length != Simulator.Instance.agents_.length)\r\n        {\r\n            this.agents_ = new Array(Simulator.Instance.agents_.length);\r\n            for (let i = 0; i < this.agents_.length; ++i)\r\n            {\r\n                this.agents_[i] = Simulator.Instance.agents_[i];\r\n            }\r\n\r\n            this.agentTree_ = [];\r\n            let len = 2 * this.agents_.length;\r\n            for (let i = 0; i < len; ++i)\r\n            {\r\n                this.agentTree_[i] = new AgentTreeNode();\r\n            }\r\n        }\r\n\r\n        if (this.agents_.length != 0)\r\n        {\r\n            this.buildAgentTreeRecursive(0, this.agents_.length, 0);\r\n        }\r\n    }\r\n\r\n    private buildAgentTreeRecursive(begin: number, end: number, node: number)\r\n    {\r\n        this.agentTree_[node].begin_ = begin;\r\n        this.agentTree_[node].end_ = end;\r\n        this.agentTree_[node].minX_ = this.agentTree_[node].maxX_ = this.agents_[begin].position_.x;\r\n        this.agentTree_[node].minY_ = this.agentTree_[node].maxY_ = this.agents_[begin].position_.y;\r\n\r\n        for (let i = begin + 1; i < end; ++i)\r\n        {\r\n            this.agentTree_[node].maxX_ = Math.max(this.agentTree_[node].maxX_, this.agents_[i].position_.x);\r\n            this.agentTree_[node].minX_ = Math.min(this.agentTree_[node].minX_, this.agents_[i].position_.x);\r\n            this.agentTree_[node].maxY_ = Math.max(this.agentTree_[node].maxY_, this.agents_[i].position_.y);\r\n            this.agentTree_[node].minY_ = Math.min(this.agentTree_[node].minY_, this.agents_[i].position_.y);\r\n        }\r\n\r\n        if (end - begin > this.MAX_LEAF_SIZE)\r\n        {\r\n            let isVertical = this.agentTree_[node].maxX_ - this.agentTree_[node].minX_ > this.agentTree_[node].maxY_ - this.agentTree_[node].minY_;\r\n            let splitValue = 0.5 * (isVertical ? this.agentTree_[node].maxX_ + this.agentTree_[node].minX_ : this.agentTree_[node].maxY_ + this.agentTree_[node].minY_);\r\n\r\n            let left = begin;\r\n            let right = end;\r\n\r\n            while (left < right)\r\n            {\r\n                while (left < right && (isVertical ? this.agents_[left].position_.x : this.agents_[left].position_.y) < splitValue)\r\n                {\r\n                    ++left;\r\n                }\r\n                while (right > left && (isVertical ? this.agents_[right - 1].position_.x : this.agents_[right - 1].position_.y) >= splitValue)\r\n                {\r\n                    --right;\r\n                }\r\n\r\n                if (left < right)\r\n                {\r\n                    let tempAgent = this.agents_[left];\r\n                    this.agents_[left] = this.agents_[right - 1];\r\n                    this.agents_[right - 1] = tempAgent;\r\n                    ++left;\r\n                    --right;\r\n                }\r\n            }\r\n\r\n            let leftSize = left - begin;\r\n            if (leftSize == 0)\r\n            {\r\n                ++leftSize;\r\n                ++left;\r\n                ++right;\r\n            }\r\n\r\n            this.agentTree_[node].left_ = node + 1;\r\n            this.agentTree_[node].right_ = node + 2 * leftSize;\r\n\r\n            this.buildAgentTreeRecursive(begin, left, this.agentTree_[node].left_);\r\n            this.buildAgentTreeRecursive(left, end, this.agentTree_[node].right_);\r\n        }\r\n    }\r\n\r\n    public buildObstacleTree()\r\n    {\r\n        this.obstacleTree_ = new ObstacleTreeNode();\r\n        const num = Simulator.Instance.obstacles_.length;\r\n        let obstacles: Array<Obstacle> = [];\r\n        for (let i = 0; i < num; ++i)\r\n        {\r\n            obstacles[obstacles.length] = Simulator.Instance.obstacles_[i];\r\n        }\r\n        this.obstacleTree_ = this.buildObstacleTreeRecursive(obstacles);\r\n    }\r\n\r\n    private buildObstacleTreeRecursive(obstacles: Array<Obstacle>): any\r\n    {\r\n        if (!obstacles || obstacles.length == 0) return;\r\n        let node = new ObstacleTreeNode();\r\n\r\n        let optimalSplit = 0;\r\n        let minLeft = obstacles.length;\r\n        let minRight = obstacles.length;\r\n\r\n        for (let i = 0; i < obstacles.length; ++i)\r\n        {\r\n            let leftSize = 0;\r\n            let rightSize = 0;\r\n\r\n            let obstacleI1 = obstacles[i];\r\n            let obstacleI2 = obstacleI1.next_;\r\n\r\n            for (let j = 0; j < obstacles.length; ++j)\r\n            {\r\n                if (i == j)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                let obstacleJ1 = obstacles[j];\r\n                let obstacleJ2 = obstacleJ1.next_;\r\n\r\n                let j1LeftOfI = RVOMath.leftOf(obstacleI1.point_, obstacleI2.point_, obstacleJ1.point_);\r\n                let j2LeftOfI = RVOMath.leftOf(obstacleI1.point_, obstacleI2.point_, obstacleJ2.point_);\r\n\r\n                if (j1LeftOfI >= -RVOMath.RVO_EPSILON && j2LeftOfI >= -RVOMath.RVO_EPSILON)\r\n                {\r\n                    ++leftSize;\r\n                }\r\n                else if (j1LeftOfI <= RVOMath.RVO_EPSILON && j2LeftOfI <= RVOMath.RVO_EPSILON)\r\n                {\r\n                    ++rightSize;\r\n                }\r\n                else\r\n                {\r\n                    ++leftSize;\r\n                    ++rightSize;\r\n                }\r\n\r\n                if (FloatPair.MorethanOrEqual(new FloatPair(Math.max(leftSize, rightSize), Math.min(leftSize, rightSize)), new FloatPair(Math.max(minLeft, minRight), Math.min(minLeft, minRight))))\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (FloatPair.Lessthan(new FloatPair(Math.max(leftSize, rightSize), Math.min(leftSize, rightSize)), new FloatPair(Math.max(minLeft, minRight), Math.min(minLeft, minRight))))\r\n            {\r\n                minLeft = leftSize;\r\n                minRight = rightSize;\r\n                optimalSplit = i;\r\n            }\r\n        }\r\n\r\n        let leftObstacles = new Array<Obstacle>(minLeft);\r\n        let rightObstacles = new Array<Obstacle>(minRight);\r\n\r\n        let leftCounter = 0;\r\n        let rightCounter = 0;\r\n        let i = optimalSplit;\r\n\r\n        let obstacleI1 = obstacles[i];\r\n        let obstacleI2 = obstacleI1.next_;\r\n\r\n        for (let j = 0; j < obstacles.length; ++j)\r\n        {\r\n            if (i == j)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            let obstacleJ1 = obstacles[j];\r\n            let obstacleJ2 = obstacleJ1.next_;\r\n\r\n            let j1LeftOfI = RVOMath.leftOf(obstacleI1.point_, obstacleI2.point_, obstacleJ1.point_);\r\n            let j2LeftOfI = RVOMath.leftOf(obstacleI1.point_, obstacleI2.point_, obstacleJ2.point_);\r\n\r\n            if (j1LeftOfI >= -RVOMath.RVO_EPSILON && j2LeftOfI >= -RVOMath.RVO_EPSILON)\r\n            {\r\n                leftObstacles[leftCounter++] = obstacles[j];\r\n            }\r\n            else if (j1LeftOfI <= RVOMath.RVO_EPSILON && j2LeftOfI <= RVOMath.RVO_EPSILON)\r\n            {\r\n                rightObstacles[rightCounter++] = obstacles[j];\r\n            } else\r\n            {\r\n                let t = RVOMath.det(Vector2.subtract(obstacleI2.point_, obstacleI1.point_), Vector2.subtract(obstacleJ1.point_, obstacleI1.point_)) / RVOMath.det(Vector2.subtract(obstacleI2.point_, obstacleI1.point_), Vector2.subtract(obstacleJ1.point_, obstacleJ2.point_));\r\n\r\n                let splitPoint = Vector2.addition(obstacleJ1.point_, Vector2.multiply2(t, (Vector2.subtract(obstacleJ2.point_, obstacleJ1.point_))));\r\n\r\n                let newObstacle = new Obstacle();\r\n                newObstacle.point_ = splitPoint;\r\n                newObstacle.previous_ = obstacleJ1;\r\n                newObstacle.next_ = obstacleJ2;\r\n                newObstacle.convex_ = true;\r\n                newObstacle.direction_ = obstacleJ1.direction_;\r\n\r\n                newObstacle.id_ = Simulator.Instance.obstacles_.length;\r\n\r\n                Simulator.Instance.obstacles_.push(newObstacle);\r\n\r\n                obstacleJ1.next_ = newObstacle;\r\n                obstacleJ2.previous_ = newObstacle;\r\n\r\n                if (j1LeftOfI > 0.0)\r\n                {\r\n                    leftObstacles[leftCounter++] = obstacleJ1;\r\n                    rightObstacles[rightCounter++] = newObstacle;\r\n                }\r\n                else\r\n                {\r\n                    rightObstacles[rightCounter++] = obstacleJ1;\r\n                    leftObstacles[leftCounter++] = newObstacle;\r\n                }\r\n            }\r\n        }\r\n\r\n        node.obstacle_ = obstacleI1;\r\n        node.left_ = this.buildObstacleTreeRecursive(leftObstacles);\r\n        node.right_ = this.buildObstacleTreeRecursive(rightObstacles);\r\n\r\n        return node;\r\n    }\r\n\r\n    public computeObstacleNeighbors(agent: Agent, rangeSq: number)\r\n    {\r\n        this.queryObstacleTreeRecursive(agent, rangeSq, this.obstacleTree_)\r\n    }\r\n\r\n    private queryObstacleTreeRecursive(agent: Agent, rangeSq: number, node: ObstacleTreeNode)\r\n    {\r\n        if (!agent || !node) return;\r\n        let obstacle1: Obstacle = node.obstacle_;\r\n        let obstacle2: Obstacle = obstacle1.next_;\r\n\r\n        let agentLeftOfLine = RVOMath.leftOf(obstacle1.point_, obstacle2.point_, agent.position_);\r\n        this.queryObstacleTreeRecursive(agent, rangeSq, agentLeftOfLine >= 0 ? node.left_ : node.right_);\r\n\r\n        let distSqLine = RVOMath.sqr(agentLeftOfLine) / RVOMath.absSq(Vector2.subtract(obstacle2.point_, obstacle1.point_));\r\n        if (distSqLine < rangeSq)\r\n        {\r\n            if (agentLeftOfLine < 0)\r\n            {\r\n                agent.insertObstacleNeighbor(node.obstacle_, rangeSq);\r\n            }\r\n            this.queryObstacleTreeRecursive(agent, rangeSq, agentLeftOfLine >= 0 ? node.right_ : node.left_);\r\n        }\r\n    }\r\n\r\n    public computeAgentNeighbors(agent: Agent, obserObj: ObserverObj<number>)\r\n    {\r\n        this.queryAgentTreeRecursive(agent, obserObj, 0);\r\n    }\r\n\r\n    private queryAgentTreeRecursive(agent: Agent, obserObj: ObserverObj<number>, node: number)\r\n    {\r\n        let agentTree = this.agentTree_[node];\r\n        if (agentTree.end_ - agentTree.begin_ <= this.MAX_LEAF_SIZE)\r\n        {\r\n            for (let i = agentTree.begin_; i < agentTree.end_; ++i)\r\n            {\r\n                agent.insertAgentNeighbor(this.agents_[i], obserObj);\r\n            }\r\n        } else\r\n        {\r\n            let distSqLeft = RVOMath.sqr(Math.max(0, this.agentTree_[this.agentTree_[node].left_].minX_ - agent.position_.x)) + RVOMath.sqr(Math.max(0, agent.position_.x - this.agentTree_[this.agentTree_[node].left_].maxX_)) + RVOMath.sqr(Math.max(0, this.agentTree_[this.agentTree_[node].left_].minY_ - agent.position_.y)) + RVOMath.sqr(Math.max(0, agent.position_.y - this.agentTree_[this.agentTree_[node].left_].maxY_));\r\n            // let distSqRight = RVOMath.sqr(Math.max(0, this.agentTree_[this.agentTree_[node].right_].minX_ - agent.position_.x)) + RVOMath.sqr(Math.max(0, agent.position_.x - this.agentTree_[this.agentTree_[node].right_].maxX_)) + RVOMath.sqr(Math.max(0, this.agentTree_[this.agentTree_[node].right_].minY_ - agent.position_.y)) + RVOMath.sqr(Math.max(0, agent.position_.y - this.agentTree_[this.agentTree_[node].right_].maxY_));\r\n\r\n            let treeNode = this.agentTree_[this.agentTree_[node].right_];\r\n            let distSqRight_1 = RVOMath.sqr(Math.max(0, treeNode.minX_ - agent.position_.x));\r\n            let distSqRight_2 = RVOMath.sqr(Math.max(0, agent.position_.x - treeNode.maxX_));\r\n            let distSqRight_3 = RVOMath.sqr(Math.max(0, treeNode.minY_ - agent.position_.y));\r\n            let distSqRight_4 = RVOMath.sqr(Math.max(0, agent.position_.y - treeNode.maxY_));\r\n            let distSqRight = distSqRight_1 + distSqRight_2 + distSqRight_3 + distSqRight_4;\r\n\r\n            if (distSqLeft < distSqRight)\r\n            {\r\n                if (distSqLeft < obserObj.value)\r\n                {\r\n                    this.queryAgentTreeRecursive(agent, obserObj, this.agentTree_[node].left_);\r\n\r\n                    if (distSqRight < obserObj.value)\r\n                    {\r\n                        this.queryAgentTreeRecursive(agent, obserObj, this.agentTree_[node].right_);\r\n                    }\r\n                }\r\n            } else\r\n            {\r\n                if (distSqRight < obserObj.value)\r\n                {\r\n                    this.queryAgentTreeRecursive(agent, obserObj, this.agentTree_[node].right_);\r\n\r\n                    if (distSqLeft < obserObj.value)\r\n                    {\r\n                        this.queryAgentTreeRecursive(agent, obserObj, this.agentTree_[node].left_);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}