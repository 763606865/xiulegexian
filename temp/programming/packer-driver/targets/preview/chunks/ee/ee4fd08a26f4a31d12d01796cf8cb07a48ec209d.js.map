{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/Cocos/%E4%BF%AE%E4%BA%86%E4%B8%AA%E4%BB%99/assets/script/global/PoolManager.ts"],"names":["PoolManager","instantiate","NodePool","constructor","pools","prefabs","junkyard","addPoolToPools","string","pool","prefab","console","warn","log","getFromPool","isNotice","obj","size","get","putToPool","destroy","uuid","put","putToJunkyard","showAllPoolsAndPrefab","clearAllNodePool","clearJunkyard","key","Object","prototype","hasOwnProperty","call","clear","plm"],"mappings":"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","sourcesContent":["/*\r\n * @Author: li_jiang_wei 739671694@qq.com\r\n * @Date: 2022-07-05 23:35:56\r\n * @LastEditors: li_jiang_wei_12345 739671694@qq.com\r\n * @LastEditTime: 2022-12-14 10:41:52\r\n * @FilePath: \\to-be-immortal\\assets\\script\\global\\PoolManager.ts\r\n * @Description: \r\n * \r\n * Copyright (c) 2022 by li_jiang_wei 739671694@qq.com, All Rights Reserved. \r\n */\r\nimport { instantiate, NodePool } from \"cc\";\r\n\r\nexport { plm }\r\nclass PoolManager {\r\n    pools;\r\n    prefabs;\r\n    junkyard;\r\n    constructor() {\r\n        this.pools = {};\r\n        this.prefabs = {};\r\n        this.junkyard = new NodePool();\r\n    }\r\n    //添加对象池和相关预制件到pools\r\n    addPoolToPools(string, pool, prefab) {\r\n        if (this.pools[string]) {\r\n            console.warn(\"对象池\" + string + \"已存在\");\r\n            return;\r\n        }\r\n        this.pools[string] = pool;\r\n        this.prefabs[string] = prefab;\r\n        console.log(\"成功添加对象池\" + string);\r\n    }\r\n    // 获取对象池中的对象\r\n    getFromPool(string: string, isNotice: boolean = false) {\r\n        let pool = this.pools[string];\r\n        let prefab = this.prefabs[string];\r\n        // if (!pool && !prefab) return console.log(\"对象池或预制件不存在\");\r\n        if (!pool) {\r\n            console.warn(\"对象池\" + string + \"不存在\");\r\n            return false;\r\n        }\r\n        if (!prefab) throw \"预制件\" + string + \"不存在\";\r\n        let obj = null;\r\n        if (pool.size() > 0) {\r\n            obj = pool.get();\r\n            if (isNotice) console.log(\"从对象池获取\" + string + \"成功\");\r\n        } else {\r\n            obj = instantiate(prefab);\r\n            if (isNotice) console.log(\"从对象池创建\" + string + \"成功\");\r\n        }\r\n        return obj;\r\n    }\r\n    //将对象放入对象池\r\n    putToPool(string: string, obj, isNotice: boolean = false) {\r\n        let pool = this.pools[string];\r\n        if (!pool) {\r\n            console.warn(string + \"对象池不存在,直接销毁\");\r\n            obj.destroy();\r\n            return;\r\n        }\r\n        if (isNotice) console.log(\"将\" + \" \" + obj.uuid + \" 放入对象池\" + string);\r\n        pool.put(obj);\r\n    }\r\n    //放入垃圾场 待处理 等待场景切换时 统一处理\r\n    putToJunkyard(obj, isNotice = false) {\r\n        // if(isNotice) console.log(\"放入垃圾场\"+obj.uuid);\r\n        if (isNotice) console.log(\"放入垃圾场\");\r\n        this.junkyard.put(obj);\r\n    }\r\n    // 显示所有对象池和预制件\r\n    showAllPoolsAndPrefab() {\r\n        console.log(\"pools\", this.pools);\r\n        console.log(\"prefabs\", this.prefabs);\r\n    }\r\n    //清空所有对象池 ---> 同时清理垃圾场\r\n    clearAllNodePool() {\r\n        this.clearJunkyard();\r\n        for (const key in this.pools) {\r\n            if (Object.prototype.hasOwnProperty.call(this.pools, key)) {\r\n                const pool = this.pools[key];\r\n                pool.clear();\r\n                delete this.pools[key];\r\n            }\r\n        }\r\n        for (const key in this.prefabs) {\r\n            if (Object.prototype.hasOwnProperty.call(this.prefabs, key)) {\r\n                delete this.prefabs[key];\r\n            }\r\n        }\r\n        console.log(\"this.pools\", this.pools);\r\n        console.log(\"this.prefabs\", this.prefabs);\r\n    }\r\n    // 清空垃圾场\r\n    clearJunkyard() {\r\n        this.junkyard.clear();\r\n    }\r\n}\r\nconst plm = new PoolManager();"]}