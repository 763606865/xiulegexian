{"version":3,"sources":["file:///C:/Users/Administrator/Desktop/Cocos/ZA/%E4%BF%AE%E4%BA%86%E4%B8%AA%E4%BB%99/assets/script/plugin/Quadtree.ts"],"names":["QuadtreeRect","constructor","bounds","max_objects","max_levels","level","objects","nodes","split","nextLevel","subWidth","width","subHeight","height","x","y","getIndex","pRect","indexes","verticalMidpoint","horizontalMidpoint","rHh","rWh","startIsNorth","startIsWest","endIsEast","endIsSouth","push","insert","i","length","k","retrieve","returnObjects","concat","filter","item","index","indexOf","clear"],"mappings":"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","sourcesContent":["export default class QuadtreeRect{\r\n\r\n    max_objects = 10;\r\n    max_levels = 4;\r\n    level = 0;\r\n    bounds = null;\r\n    objects = [];\r\n    nodes = [];\r\n\r\n    \r\n    /**\r\n     * Quadtree Constructor\r\n     * @class Quadtree\r\n     * @param {Rect} bounds                 bounds of the node ({ x, y, width, height })\r\n     * @param {number} [max_objects=10]     (optional) max objects a node can hold before splitting into 4 subnodes (default: 10)\r\n     * @param {number} [max_levels=4]       (optional) total max levels inside root Quadtree (default: 4) \r\n     * @param {number} [level=0]            (optional) depth level, required for subnodes (default: 0)\r\n     */\r\n    constructor(bounds : any, max_objects : number = 10, max_levels : number = 4, level :number = 0) { \r\n        this.max_objects    = 5;\r\n        this.max_levels     = 10;\r\n        // this.max_objects    = max_objects;\r\n        // this.max_levels     = max_levels;\r\n        \r\n        this.level  = level;\r\n        this.bounds = bounds;\r\n        \r\n        this.objects    = [];\r\n        this.nodes      = [];\r\n    }\r\n\r\n    split(){\r\n        var nextLevel   = this.level + 1,\r\n            subWidth    = this.bounds.width/2,\r\n            subHeight   = this.bounds.height/2,\r\n            x           = this.bounds.x,\r\n            y           = this.bounds.y;        \r\n     \r\n        //top right node\r\n        this.nodes[0] = new QuadtreeRect({\r\n            x       : x + subWidth/2, \r\n            y       : y + subHeight/2, \r\n            width   : subWidth, \r\n            height  : subHeight\r\n        }, this.max_objects, this.max_levels, nextLevel);\r\n        \r\n        //top left node\r\n        this.nodes[1] = new QuadtreeRect({\r\n            x       : x - subWidth/2, \r\n            y       : y + subHeight/2, \r\n            width   : subWidth, \r\n            height  : subHeight\r\n        }, this.max_objects, this.max_levels, nextLevel);\r\n        \r\n        //bottom left node\r\n        this.nodes[2] = new QuadtreeRect({\r\n            x       : x - subWidth/2, \r\n            y       : y - subHeight/2, \r\n            width   : subWidth, \r\n            height  : subHeight\r\n        }, this.max_objects, this.max_levels, nextLevel);\r\n        \r\n        //bottom right node\r\n        this.nodes[3] = new QuadtreeRect({\r\n            x       : x + subWidth/2, \r\n            y       : y - subHeight/2, \r\n            width   : subWidth, \r\n            height  : subHeight\r\n        }, this.max_objects, this.max_levels, nextLevel);\r\n    }\r\n\r\n    /**\r\n     * Determine which node the object belongs to\r\n     * @param {Rect} pRect      bounds of the area to be checked ({ x, y, width, height })\r\n     * @return {number[]}       an array of indexes of the intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right / ne, nw, sw, se)\r\n     * @memberof Quadtree\r\n     */\r\n    getIndex(pRect) {\r\n        \r\n        var indexes = [],\r\n            verticalMidpoint    = this.bounds.x,\r\n            horizontalMidpoint  = this.bounds.y,\r\n            rHh                 = pRect.height * 0.5,\r\n            rWh                 = pRect.width  * 0.5;\r\n        var startIsNorth = pRect.y + rHh > horizontalMidpoint,\r\n            startIsWest  = pRect.x - rWh < verticalMidpoint,\r\n            endIsEast    = pRect.x + rWh > verticalMidpoint,\r\n            endIsSouth   = pRect.y - rHh < horizontalMidpoint;\r\n\r\n        //top-right quad\r\n        if(startIsNorth && endIsEast) {\r\n            indexes.push(0);\r\n        }\r\n        \r\n        //top-left quad\r\n        if(startIsWest && startIsNorth) {\r\n            indexes.push(1);\r\n        }\r\n\r\n        //bottom-left quad\r\n        if(startIsWest && endIsSouth) {\r\n            indexes.push(2);\r\n        }\r\n\r\n        //bottom-right quad\r\n        if(endIsEast && endIsSouth) {\r\n            indexes.push(3);\r\n        }\r\n\r\n        return indexes;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Insert the object into the node. If the node\r\n     * exceeds the capacity, it will split and add all\r\n     * objects to their corresponding subnodes.\r\n     * @param {Rect} pRect      bounds of the object to be added ({ x, y, width, height })\r\n     * @memberof Quadtree\r\n     */\r\n    insert(pRect) {\r\n        \r\n        var i = 0,\r\n            indexes;\r\n        \r\n        //if we have subnodes, call insert on matching subnodes\r\n        if(this.nodes.length) {\r\n            indexes = this.getIndex(pRect);\r\n     \r\n            for(i=0; i<indexes.length; i++) {\r\n                this.nodes[indexes[i]].insert(pRect);     \r\n            }\r\n            return;\r\n        }\r\n     \r\n        //otherwise, store object here\r\n        this.objects.push(pRect);\r\n\r\n        //max_objects reached\r\n        if(this.objects.length > this.max_objects && this.level < this.max_levels) {\r\n\r\n            //split if we don't already have subnodes\r\n            if(!this.nodes.length) {\r\n                this.split();\r\n            }\r\n            \r\n            //add all objects to their corresponding subnode\r\n            for(i=0; i<this.objects.length; i++) {\r\n                indexes = this.getIndex(this.objects[i]);\r\n                for(var k=0; k<indexes.length; k++) {\r\n                    this.nodes[indexes[k]].insert(this.objects[i]);\r\n                }\r\n            }\r\n\r\n            //clean up this node\r\n            this.objects = [];\r\n        }\r\n    }\r\n     \r\n     \r\n    /**\r\n     * Return all objects that could collide with the given object\r\n     * @param {Rect} pRect      bounds of the object to be checked ({ x, y, width, height })\r\n     * @return {Rect[]}         array with all detected objects\r\n     * @memberof Quadtree\r\n     */\r\n    retrieve(pRect) {\r\n         \r\n        var indexes = this.getIndex(pRect),\r\n            returnObjects = this.objects;\r\n            \r\n        //if we have subnodes, retrieve their objects\r\n        if(this.nodes.length) {\r\n            for(var i=0; i<indexes.length; i++) {\r\n                returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(pRect));\r\n            }\r\n        }\r\n\r\n        //remove duplicates\r\n        returnObjects = returnObjects.filter(function(item, index) {\r\n            return returnObjects.indexOf(item) >= index;\r\n        });\r\n     \r\n        return returnObjects;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Clear the quadtree\r\n     * @memberof Quadtree\r\n     */\r\n    clear() {\r\n        \r\n        this.objects = [];\r\n     \r\n        for(var i=0; i < this.nodes.length; i++) {\r\n            if(this.nodes.length) {\r\n                this.nodes[i].clear();\r\n              }\r\n        }\r\n\r\n        this.nodes = [];\r\n    };\r\n}"]}